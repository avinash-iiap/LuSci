

% --------------LuSci Voltage to Covariance conversion v1----------------
% The code will import .lvm files created with ONE header, which has been
% created with the LuSci Labview VI at 500 samples per second for 6
% channels, and converts it into .cov files in a specified format
% (lusci<Index>_<Date(yyyy-dd-mm)>.cov). The cov file contains covariances
% calculated after dividing the voltage data into one minute parts. The
% number of rows in the cov file will be equal to the number of minutes of
% observation. The program creates the cov file in a way that can be read
% by profrest.pro (written by the team under Prof. Andrei Tokovinin, CTIO,
% Chile) for computing the turbulence profile from covariances. The program
% has been modified to discard erroneous data caused due to cloudy weather,
% wind buffetting, and loose contacts in wiring. The program will terminate
% if there is not enough usable data to be processed.

% This file takes inputs from lusci_params1.txt in the main folder, which
% contains the following
% input_file :- Points to the directory containing the input lvm file
%               generated by LuSci.vi during observations.
%
% output_folder :- Points to the folder where covariance (.cov), turbulence
%                  profile (.tp) and the final result report file (.ps) are
%                  stored
%
% File_index :-    If you have multiple observation files for the same
%                  date, use a different file_index while processing each
%                  file, the file index will be reflected in the output
%                  filename also
%
% IDL_parameters :- Points to the location of the .par file which gives the
%                   details of the site of observations, required by the
%                   IDL program, profrest.pro. The syntax of parameters is
%                   given in Section 2.3 of the following link
%                   http://www.ctio.noao.edu/~atokovin/profiler/code4.pdf
% 

clear
try
    matlabpool open local 3
    pool=1;
catch
    disp('MATLAB pool could not be opened, continue program with normal processing...');
    pool=0;
end
try
    nchan=6;   % No. of data channels (photodiodes)
    rej=0.5;    % Fraction of invalid points in a 1 minute sample above which the sample is rejected
    rej_global=0.4; % Fraction of samples above which the whole night is rejected
    std_factor=5; % Confidence interval of outlier rejection (in terms of 'sigma' units)
    iter=20; % Number of iterations for outlier rejection (in terms of 'sigma' units)
    fprintf('\n Statistical rejection parameters \n Local rejection ratio : %s \n Global rejection ratio : %s \n Iterations of rejection : %s \n Sigma rejection factor : %s \n',num2str(rej),num2str(rej_global),num2str(iter),num2str(std_factor));
    fpath=mfilename('fullpath');
    filepath=fpath(1:length(mfilename('fullpath'))-length(mfilename));
    addpath(filepath);
    fclose('all');
    d='n';
    sk='n';
    % Reading input and output file parameters
    fprintf('\n Reading input and output parameters...');
    fid=fopen('lusci_params1.txt');
    f=fgets(fid);
    input_file=f(13:length(f)-2);
    f=fgets(fid);
    output_path=f(16:length(f)-2);
    f=fgets(fid);
    index=str2num(f(length(f)-1));
    f=fgets(fid);
    IDL_param=f(17:length(f)-2);
    f=fgets(fid);
    input_dark=f(8:length(f)-2);
    if(exist(strcat(output_path))~=7)
        mkdir(output_path);
    end
    
    %Dark background subtraction
    if(isempty(input_dark)~=1)
        try
            lvm_import_orig(input_dark);
            dark=ans.Segment1.data(:,2:nchan+1);
            clearvars ans;
            if(abs(mean(dark(:)))<0.1)
                d='y';
                disp('---------------Dark background import successful---------------');
            else
                disp('---------------The dark background is too bright, discarding the values---------------');
            end
        catch
            disp('----------------The dark background cannot be imported, invalid input file------------');
        end
    end
    
    %Sky background subtraction
    f=fgets(fid);
    input_sky=f(7:length(f)-2);
    if(isempty(input_sky)~=1)
        try
            lvm_import_orig(input_sky);
            sky=ans.Segment1.data(:,2:nchan+1);
            clearvars ans;
            sk='y';
        catch
            disp('----------------The sky background cannot be imported, invalid input file, taking 20 percent------------');
        end
    end
    %Converting samples in a second specified in lusci_params to
    %samples/minute, samp_min
    f=fgets(fid);
    samples=str2num(f(10:length(f)-1));
    samp_min=samples*60;
    fclose('all');
    % Importing data from lvm file and storing formatted data into variables
    try
        lvm_import_orig(input_file);
    catch
        disp('----------------The data cannot be imported, invalid input file------------');
        fid = fopen(strcat(filepath,'TMP.txt'),'w');
        fprintf(fid, strcat(output_path,'\n','lusci1_2013-01-01','\n',IDL_param,'\n',num2str(5)));
        fclose(fid);
        if pool==1
            matlabpool close
        end
        exit;
    end
    disp('Parsing dates from the lvm file...');
    [yy mm dd HH MM SS]=datevec(ans.Time,'HH:MM:SS.FFF');
    [yy mm dd]=datevec(ans.Date,'yyyy/mm/dd');
    dn=datenum([yy,mm,dd,HH,MM,SS]);
    if(HH<7)
        dn=dn-1;                % If data starts after midnight, reset the date to the previous day
    end
    output_filename=strcat('lusci',num2str(index),'_',datestr(dn,'yyyy-dd-mm'));
    if(HH<7)
        dn=dn+1;
    end
    mjd(1)=julian(yy,mm,dd,HH,MM,SS);
    mjd(1)=mjd(1)-2400000.72917;
    ncov=nchan*(nchan-1)/2;
    v=ans.Segment1.data(:,1:nchan+1);
    clearvars ans;
    if(d=='y')                                                                   % Subtracting dark and sky
        v(:,2:nchan+1)=v(:,2:nchan+1)-mean(dark(:));
    end
    if(sk=='y')
        v(:,2:nchan+1)=v(:,2:nchan+1)-mean(sky(:));
    else
        disp('----------------No sky background file specified------------');
    end
    fliplr(v(:,2:nchan+1));
    if(exist(strcat(output_path,output_filename,'.cov'))==2)
        delete(strcat(output_path,output_filename,'.cov'));
    end

    % Sky background rejection commented out as the 20% rejection claim in
    % the absence of any sky background data seems dubious.
    
%     f=zeros(1,nchan);
%     mn=zeros(1,nchan);
%     %Computing the mean (mn) of each channel of unfiltered RAW data
%     disp('Computing the mean of each channel of unfiltered RAW data');
%     for i=1:length(v)
%         for j=2:nchan+1
%             if(v(i,j)<0 && v(i,j)>-2)
%                 mn(j-1)=mn(j-1)+v(i,j);
%                 f(j-1)=f(j-1)+1;
%             end
%         end
%     end
%     mn=mn(:)./f(:);
%     % 20% sky background subtraction in the absence of sky data
%     if(sk=='n')
%         disp('Sky background subtraction in the absence of sky data');
%         parfor i=1:length(v)
%             for j=2:nchan+1
%                 v(i,j)=v(i,j)-0.2.*mn(j-1);
%             end
%         end
%     end
    
    % Preliminary rejection of obsolete data, and conditioning
    c=ceil(length(v)/samp_min);
    tot=zeros(samp_min,nchan+1,c);
    z_count=0;
    mn=zeros(1,nchan);
    disp('Preliminary rejection of voltages above 2V and less than 0V caused by telescope tracking errors........');
    for i=1:c
        for j=1:samp_min
            if length(v)>=(((i-1)*samp_min)+j)
                tot(j,:,i)=v((((i-1)*samp_min)+j),:);
            end
            for k=2:nchan+1
                if(tot(j,k,i)>0 || tot(j,k,i)<-2)
                    if (tot(j,1,i)~=0)
                        tot(j,1,i)=0;   % Declare timestamp to be zero if voltage>2 || <-2
                        z_count=z_count+1;
                    end
                end
            end
        end
    end
    
    if z_count>rej_global*length(v)
        fprintf('\n----------------The quality of data is poor, %s%% of the voltages are outside permissible limits------------',num2str(z_count*100/length(v)));
        fid = fopen(strcat(filepath,'TMP.txt'),'w');
        fprintf(fid, strcat(output_path,'\n','lusci1_2013-01-01','\n',IDL_param,'\n',num2str(5)));
        fclose(fid);
        if pool==1
            matlabpool close
        end
        exit;
    else
        fprintf('\n----------------The quality of data is good, only %s%% outside permissible limits------------\n',num2str(z_count*100/length(v)));
    end
    
    disp('Recalculating mean after sky backround subtraction and preliminary rejection');
    parfor i=2:nchan+1
        mn(i-1)=mean(mean(tot(:,i,:))); % Recalculate mean after sky backround subtraction and preliminary rejection
    end
    if(abs(mn)<0.3*ones(1,nchan))
        disp('Amplitude of data too small, exiting'); % Reject dataset if the mean flux is too low (<0.3V)
        if pool==1
            matlabpool close
        end
        exit;
    else
        disp('Amplitude check passed...');
    end
    
    % Rejection of outliers from tot out of 'std_factor' sigma after fitting
    % on to a gaussian % by declaring timestamp of corresponding % rows as zero
    % (Rejection of systemic % errors like telescope jitter, wind % buffeting
    % etc)
    disp('Rejecting spurious voltage values based on statistical iterative method.....');
    disp_done=0;
    for i=1:c
        for k=2:nchan+1
            for p=1:iter
                sample=zeros(samp_min,1);
                count=0;
                for j=1:samp_min
                    if(tot(j,1,i)~=0)
                        count=count+1;
                        sample(count)=tot(j,k,i);
                    end
                end
                if count~=0
                    m=mean(sample(1:count));
                    s=std(sample(1:count));
                    for j=1:samp_min
                        if(abs(tot(j,k,i)-m)>(std_factor/2)*abs(s))
                            tot(j,1,i)=0;
                        end
                    end
                end
            end
        end
    end
    
    c=size(tot);
    c=c(3);
    timearray=zeros(1,c);
    parfor i=1:c
        timearray(i)=floor(v(((i-1)*samp_min)+1,1)/60);
        g(i)=0;
        for j=1:samp_min
            if tot(j,1,i)==0
                g(i)=g(i)+1;
            end
        end
    end
    
    a=0;
    index=[];
    for i=1:c
        if g(i)>=samp_min*rej
            a=a+1;
            index(a)=i; % Rejection of 1 minute chunks if fraction of outliers>'rej'
        end
    end
    tot(:,:,index)=[];
    timearray(index)=[];
    clearvars index;
    c=size(tot);
    c=c(3);
    ac=zeros(samp_min,nchan+1,c);
    ac(:,1,:)=tot(:,1,:);
    disp('Computing the scintillation indices...........');
    for i=1:c
        for k=2:nchan+1
            mn=0;
            a=0;
            for j=1:samp_min
                if tot(j,1,i)~=0
                    mn=mn+tot(j,k,i);
                    a=a+1;
                end
            end
            mn=mn/a;
            ac(:,k,i)=abs(tot(:,k,i)-mn)./46; % Compute AC value by subtracting from mean of the sample and dividing by differential gain of amplifier (46)
        end
    end
    
    % Averaging and Covariance calculation
    disp('Covariance and variance computation...............');
    clearvars mn;
    cov_len=(nchan*(nchan-1))/2;
    cov=zeros(c,cov_len);
    var=zeros(c,nchan);
    for i=1:c
        varnr=zeros(1,nchan);
        vardr=zeros(1,nchan);
        covnr=zeros(1,cov_len);
        covdr=zeros(1,cov_len);
        for j=1:nchan
            for k=1:samp_min
                if(tot(k,1,i)~=0)   % tot values whose timestamp~=0 have only been taken (outliers not considered)
                    varnr(j)=varnr(j)+ac(k,j+1,i).^2;
                    vardr(j)=vardr(j)+tot(k,j+1,i).^2;
                end
            end
            var(i,j)=varnr(j)/vardr(j);
        end
        n=1;
        for j=1:nchan-1
            for l=j+1:nchan
                for k=1:samp_min
                    if(tot(k,1,i)~=0)   % tot values whose timestamp~=0 have only been taken (outliers not considered)
                        covnr(n)=covnr(n)+ac(k,j+1,i).*ac(k,l+1,i);
                        covdr(n)=covdr(n)+tot(k,j+1,i).*tot(k,l+1,i);
                    end
                end
                cov(i,n)=covnr(n)/covdr(n);
                n=n+1;
            end
        end
    end
    
    % ----------------------------Editing over------------------------------
    % Obsolete data rejection based on unusually high variance and covariance
    % of data chunks (Variance and covariance values which are 'std_factor'
    % sigma outside of the normal fitted distribution will be rejected
    disp('Covariance and Variance spurious value rejection based on statistical iterative method.................');
    var_raw=zeros(length(var),nchan+1);
    cov_raw=zeros(length(cov),cov_len+1);
    var_raw(:,1)=timearray;
    cov_raw(:,1)=timearray;
    var_raw(:,2:nchan+1)=var;
    cov_raw(:,2:cov_len+1)=cov;
    a=0;
    err=zeros(length(var));
    for k=1:nchan
        mn_var=mean(var(:,k));
        st_var=std(var(:,k));
        mdn_var=median(var(:,k));
        for i=1:length(var)
            if (abs(var(i,k)-mn_var)>abs((std_factor/2)*st_var) || var(i,k)>5*mdn_var)
                a=a+1;
                err(a)=i;
            end
        end
    end
    err(err==0)=[];
    err=unique(err);
    var_raw(err,1)=0;
    cov_raw(err,1)=0;
    var(err,:)=[];
    cov(err,:)=[];
    timearray(err)=[];
    a=0;
    errc=zeros(length(cov));
    for k=1:ncov
        mn_covar=mean(cov(:,k));
        st_covar=std(cov(:,k));
        mdn_covar=median(cov(:,k));
        for i=1:length(cov)
            if (abs(cov(i,k)-mn_covar)>abs((std_factor/2)*st_covar) || cov(i,k)>5*mdn_covar)
                a=a+1;
                errc(a)=i;
            end
        end
    end
    errc(errc==0)=[];
    errc=unique(errc);
    var(errc,:)=[];
    cov(errc,:)=[];
    parfor i=1:length(var_raw)
        for j=1:length(errc)
            if var_raw(i,1)==timearray(errc(j))
                var_raw(i,1)=0;
                cov_raw(i,1)=0;
            end
        end
    end
    timearray(errc)=[];
    
    % Writing covariances into cov file in a format understandable by
    % profrest.pro
    disp('Writing the covariance data file......................');
    fid=fopen(strcat(output_path,output_filename,'.cov'),'a');
    mjd=zeros(length(cov),1);
    time_cov=zeros(length(cov),1);
    for i=1:length(cov)
        if i~=1
            MM=MM+timearray(i)-timearray(i-1);
        else
            MM=MM+timearray(i);
        end
        if MM>=60
            MM=MM-60;
            HH=HH+1;
        end
        if HH>=24
            HH=HH-24;
            dd=dd+1;
        end
        time_cov(i)=datenum([yy,mm,dd,HH,MM,SS]);
        mjd(i)=julian(yy,mm,dd,HH,MM,SS)-2400000.72917;
        fprintf(fid, [output_filename,'    ']);
        fprintf(fid, '%10.4f',mjd(i));
        for k=1:nchan
            A_str = sprintf('%11.4E',var(i,k));
            A_str = strrep(A_str, 'E-0','E-00');
            fprintf(fid, A_str);
        end
        for k=1:ncov
            A_str = sprintf('%11.4E',cov(i,k));
            A_str = strrep(A_str, 'E-0','E-00');
            fprintf(fid, A_str);
        end
        fprintf(fid, '\n');
    end
    fclose('all');
    if pool==1
        matlabpool close
    end
    
    % Saving variables needed by report_compiled1.m and the shell
    disp('Saving variables for later use....................');
    save('var_report.mat','dn','tot','output_path','output_filename','input_file','input_dark','input_sky','std_factor','var_raw','cov_raw','time_cov');
    if(exist(strcat(filepath,'TMP.txt'))==2)
        delete(strcat(filepath,'TMP.txt'));
    end
    fid = fopen(strcat(filepath,'TMP.txt'),'w');
    fprintf(fid, strcat(output_path,'\n',output_filename,'\n',IDL_param,'\n',num2str(length(cov))));
    fclose(fid);
    disp('Exiting the program............................');
catch ME
    disp('The voltage to covariance program has encountered an unknown error and will exit');
    fid = fopen(strcat(filepath,'TMP.txt'),'w');
    fprintf(fid, strcat(output_path,'\n','lusci1_2013-01-01','\n',IDL_param,'\n',num2str(5)));
    fclose(fid);
    ME;
    if pool==1
        matlabpool close
    end
    exit;
end
